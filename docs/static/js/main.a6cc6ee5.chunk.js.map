{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAZW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAUT,EACVU,SArBc,SAAEP,GAExBF,EAAgBE,EAAEQ,OAAOF,a,+BCTpBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAETC,EAFS,iDAEwCC,UAAWH,GAFnD,+DAGII,MAAQF,GAHZ,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV3B,kBAcRM,GAdQ,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCNJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAKtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAAEpB,IAGEqB,EDhB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAIlDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,aADA,CACC,EAAD,eAGSA,GAFCA,EAAIC,aEQ3BgB,EApCM,WAIjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACA,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAIA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACX,cAAC,EAAD,CAEGA,SAAWA,GADLA,Y,MCrB9B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a6cc6ee5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        //console.log(e.target.value);\n        setInputValue ( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [ inputValue, ...cats ]);\n            setInputValue('');\n        }\n\n        //console.log('Submit hecho');\n    }\n\n    return (\n        <form onSubmit= { handleSubmit }>\n            <input \n                type=\"text\"\n                value = { inputValue }\n                onChange= { handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=XmQwpp0wlWjvbjQEsllyaDSg8xN1odEP`\n        const resp = await fetch ( url );\n        const { data } = await resp.json();\n\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n\n        return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    //console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            {/* { img.title } */}\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React/*, { useState, useEffect }*/ from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [count, setCount] = useState(0);\n    // const [images, setImages] = useState([]);  \n\n    const { data:images, loading } = useFetchGifs( category );\n\n    // useEffect( () => {\n    //     getGifs( category )\n    //         //.then ( imgs => setImages( imgs ));\n    //         .then( setImages );\n    // }, [ category ] );\n    \n    //getGifs();\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            {/* { loading ? 'Cargando...' : 'Data cargada' } */}\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {/* <ol> */}\n                    {\n                        images.map( img => (\n                            //<li key={ img.id }> { img.title }</li>\n                            <GifGridItem \n                                key={ img.id }\n                                //img={ img }\n                                { ...img } //pasamos todos los argumentos de img de manera más legible\n                            />\n                        ))\n                        // images.map( {id, title} => (\n                        //     <li key={ id }> { title }</li>\n                        // ))\n                    }\n                {/* </ol> */}\n                {/* <h3>{ count }</h3>\n                <button onClick={ ()=> setCount(count + 1)}></button> */}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n        getGifs( category )\n            .then( imgs => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n    \n            })\n\n    }, [ category ] );\n\n\n    return state; // (({ data: [], loading true}))\n\n\n}","//snipped rafc\nimport React, { useState } from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     setCategories([...categories, 'Friends']);\n    //     //setCategories( cats => [ ...cats, 'Friends']);\n    // }\n\n    return (\n    <>\n        <h2>GifExpertApp</h2>\n\n        <AddCategory setCategories= {setCategories}/>\n\n        <hr/>\n\n        {/* <button onClick={ handleAdd }>Añadir Categoria</button> */}\n\n        <ol>\n            {\n                categories.map( (category) => (\n                     <GifGrid \n                        key={ category }\n                        category={ category }\n                    />\n                ))\n            }\n        </ol>\n\n    </>\n    );\n} \n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n// Crear componente GifExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />>"],"sourceRoot":""}